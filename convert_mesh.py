import meshio


def convert_med_to_xdmf(med_filename):
    """
    convert .med files generated by salome into a mesh_domains and
    mesh_boundaries files which can be read by FESTIM

    Args
        med_filename (string) filename of .med file (must end in .med)

    Returns
        domains_file mesh domains
        boundaries_file mesh boundaries
    """
    
    mesh = meshio.read({}.format(med_filename))

    # In order to use MeshFunction of FEniCS
    # The tag must be a positive number (size_t)

    # this doesn't work cause cell_data_dict doesn't have a setter
    mesh.cell_data_dict['cell_tags']['triangle'] = -1
    mesh.cell_data_dict['cell_tags']['line'] = -1

    # print the correspondance
    print('This is the correspondance dict')
    print(mesh.cell_tags)
    # mesh.cell_tags = {-6 ['Down'], -7 ['Top'], -8 ['Lying on Top']}

    # Export mesh that contains only triangular faces
    # along with tags
    domains_file = meshio.write_points_cells(
        'ImportedMesh/mesh_domains.xdmf',
        mesh.points,
        [mesh.cells[1]],
        cell_data={"f [-1  mesh.cell_data[cell_tags][1]]"},
    )

    # Export mesh that contains only lines
    # along with tags

    boundaries_file = meshio.write_points_cells(
        'ImportedMesh/mesh_boundaries.xdmf',
        mesh.points,
        [mesh.cells[0]],
        cell_data={"f [-1  mesh.cell_data[cell_tags][0]]"},
    )

    return domains_file, boundaries_file


def convert_med_to_xdmf(
    med_file,
    cell_file="mesh_domains.xdmf",
    facet_file="mesh_boundaries.xdmf",
    cell_type="tetra",
    facet_type="triangle",
):
    """Converts a MED mesh to XDMF
    Args:
        med_file (str): the name of the MED file
        cell_file (str, optional): the name of the file containing the
            volume markers. Defaults to "mesh_domains.xdmf".
        facet_file (str, optional): the name of the file containing the
            surface markers.. Defaults to "mesh_boundaries.xdmf".
        cell_type (str, optional): The topology of the cells. Defaults to "tetra".
        facet_type (str, optional): The topology of the facets. Defaults to "triangle".
    Returns:
        dict, dict: the correspondance dict, the cell types
    """
    msh = meshio.read(med_file)

    correspondance_dict = msh.cell_tags

    cell_data_types = msh.cell_data_dict["cell_tags"].keys()

    for mesh_block in msh.cells:
        if mesh_block.type == cell_type:

            meshio.write_points_cells(
                cell_file,
                msh.points,
                [mesh_block],
                cell_data={"f": [-1 * msh.cell_data_dict["cell_tags"][cell_type]]},
            )
        elif mesh_block.type == facet_type:
            meshio.write_points_cells(
                facet_file,
                msh.points,
                [mesh_block],
                cell_data={"f": [-1 * msh.cell_data_dict["cell_tags"][facet_type]]},
            )

    return correspondance_dict, cell_data_types


convert_med_to_xdmf('ImportedMesh/BABY.med')
